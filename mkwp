#!/usr/bin/env bash
#
# mkwp by Thomas Barregren <thomas@kntnt.com>
# =============================================================================


help() {

	echo -e "NAME
	mkwp - make wordpress

\e[1mSYNOPSIS\e[0m
	\e[1mmkwp\e[0m [OPTION]... NAME

\e[1mDESCRIPTION\e[0m
	Makes a local WordPress site with the domain \e[1mname.ddev.site\e[0m where
	\e[1mname\e[0m is the domain name provided as the argument [NAME].

	If a flag is not specified on the command line, the corresponding option
	is in the first place set to a value read from the configuration file
	specified with \e[1m-c\e[0m or \e[1m--config\e[0m, in the second place to a value read
	from the configuration file \e[1m~/.mkwp\e[0m, and in the third place to
	a default value.git

	If the configuration file \e[1m~/.mkwp\e[0m is missing, an empty one will be
	created.

	A configuration files should be formatted so that each line starting
	with the name of a long format flag, excluding leading double dashes
	(e.g. \e[1memail\e[0m instead of \e[1m--email\e[0m), followed by an equal
	sign, where the corresponding flag has not been specified on the command
	line, the flag is specified with the option set to the value following
	the equal sign. White space may be used around the equal sign.
	Examples:

		title = WordPress Tets Site
		php=8.3

\e[1mOPTIONS\e[0m
	\e[1m-t <title>\e[0m
	\e[1m--title=<title>\e[0m
		The title of the WordPress site. If omitted, [NAME] will be used.

	\e[1m-d <path>\e[0m
	\e[1m--directory=<path>\e[0m
		The home directory of the website. If omitted, current directory
		will be used as home directory.

	\e[1m-m <email>\e[0m
	\e[1m--email=<email>\e[0m
		The email address of the first user created in WordPress. If
		If omitted, the current username is used as local-part and
		the hostname as domain.

	\e[1m-u <username>\e[0m
	\e[1m--user=<username>\e[0m
		The username of the first user created in WordPress. If omitted,
		the local-part of the email address will be used.

	\e[1m-p <password>\e[0m
	\e[1m--password=<password>\e[0m
		The password of the first user created in WordPress. Must at
		least be 12 characters long. If omitted, a 16 character random
		password is generated.

	\e[1m-l <locale>\e[0m
	\e[1m--language=<locale>\e[0m
		The language of the WordPress site. If omitted, en_US will be
		used.

	\e[1m-T <themes>\e[0m
	\e[1m--themes=<themes>\e[0m
		Comma spearared list of themes to install. For a theme hosted on
		WordPress.org, enter its slug or URL to its zip-file. For a theme
		hosted in a remote Git repository, enter its remote URL. For a
		theme hosted locally, enter the path to the zip file. The last listed
		theme is activated. If omitted, twentytwentyfour will be used.

	\e[1m-P <plugins>\e[0m
	\e[1m--plugins=<plugins>\e[0m
		Comma spearared list of plugins to install. For a plugin hosted on
		WordPress.org, enter its slug or URL to its zip-file. For a plugin
		hosted in a remote Git repository, enter its remote URL. For a plugin
		hosted locally, enter the path to the zip file.

	\e[1m-M <plugins>\e[0m
	\e[1m--mu-plugins=<plugins>\e[0m
		Comma spearared list of mu-plugins to install. For each plugin,
		provide the plugin's URL from where it can be downloaded as
		php-file (e.g. https://raw.githubusercontent.com/Kntnt/kntnt-
		adminbar-sanitizer/master/kntnt-adminbar-sanitizer.php).
		If omitted, no mu-plugins will be installed.

	\e[1m-V <version>\e[0m
	\e[1m--php=<version>\e[0m
		Version of PHP to be used. If omitted, PHP 7.4 will be used.

	\e[1m-c <file>\e[0m
	\e[1m--config=<file>\e[0m
		Reads configuration from a file with the path <file>.
		See description above for deatils.

	\e[1m-h\e[0m
	\e[1m--help\e[0m
		Display this help and exit.

\e[1mDEPENDENCY\e[0m
	This command requires that a Docker provider is installed and running
	on your system and that DDEV is properly installed and in your path." | less -R

}

# Usage: die <message> <satus>
# Echos the <message> and exit with the status code <status>
die() {
	echo -e "\033[0;31m${1:-}\033[0m" 1>&2
	exit "${2:-0}"
}

# Usage: extract_argument <variable> <args>
# Validates that <args> starts with a short format flag (e.g. -P 8.3) or
# long format flag (e.g. --php=8.3) and then creates a global variable
# named <variabl> that is assigned the value following the flag (e.g. 8.3).
# The status code indicates whether 1 or 2 arguments from <args> have been
# consumed. Status codes other than 1 and 2 indicate errors. This solution
# can be said to be a hack, but is preferred to echoing the response, as
# echoing would require the use of command substitution in the calling code,
# making error handling messy as die (which calls exit) would only terminate
# the subprocess but not the calling process.
extract_argument() {

	if [[ "$2" =~ ^--[^=]+=(.+)$ ]]; then # Long flag format, e.g. --php=8.3

		declare -g "$1"="${BASH_REMATCH[1]}"
		return 1

	elif [[ "$2" =~ ^-[^-]$ ]]; then # Short flag format, e.g. -P 8.3

		declare -g "$1"="$3"
		return 2

	else

		die "Error: Missing option for $1" 12

	fi

}

# Usage: handle_arguments <args>
# Pars <args>, which is expected to be the argumewnt list from the command
# line, and creating corresponding variables containing options.
handle_arguments() {

	while [[ $# > 0 ]]; do
		case $1 in
			-h | --help) help; die ;;
			-t | --title=*) extract_argument title $@; shift $? ;;
			-d | --directory=*) extract_argument directory $@; shift $? ;;
			-m | --email=*) extract_argument email $@; shift $? ;;
			-u | --user=*) extract_argument user $@; shift $? ;;
			-p | --password=*) extract_argument password $@; shift $? ;;
			-l | --language=*) extract_argument language $@; shift $? ;;
			-T | --themes=*) extract_argument themes $@; shift $? ;;
			-P | --plugins=*) extract_argument plugins $@; shift $? ;;
			-M | --mu-plugins=*) extract_argument mu_plugins $@; shift $? ;;
			-V | --php=*) extract_argument php $@; shift $? ;;
			-c | --config=*) extract_argument config $@; shift $? ;;
			*) [ -z "$name" ] && name="$1" && shift || die "\033[0;31mError: Invalid flag: $1\033[0m" 2 ;;
		esac
	done

	[[ -z "$name" ]] && die "The required argument NAME is missing. See \033[1mmkwp -h\033[22m for more information." 5

}

# Usage: handle_config_files
handle_config_files() {

	# Create a list of files to read configuration from
	local files=()

	# Add config file to the list of configuration files if it exists and is readable
	if [[  $config ]]; then # Config file is supplied


		# Use /dev/stdin if config file is -
		[[ "$config" = "-" ]] && config="/dev/stdin"

		# Validate config file
		touch $config &> /dev/null && [[ -r $config ]] || die "Invalid path to config file" 10

		# Add the config file to the list of files to read configuration from
		files+=($config)

	fi

	# Add ~/.mkwp file to the list of configuration files if is readable. Create ~/.mkwp if it doesn't exist.
	touch ~/.mkwp &> /dev/null && [[ -r ~/.mkwp ]] && files+=(~/.mkwp) || die "Couldn't create ~/.mkwp" 12

	# Read config files
	while IFS= read -r line || [ "$line" ]; do


		# Validate the line structure
		if [[ $line =~ ^(name|title|directory|email|user|password|language|themes|plugins|mu-plugins|php)[[:space:]]*=[[:space:]]*(.*) ]]; then

			# Extract keyword and value
			local key="${BASH_REMATCH[1]//-/_}"
			local value="${BASH_REMATCH[2]}"

			# If the global variable named in $key is empty, assign it the
			# value in $value. N.B. We know that $key contains a name of
			# an already declared global variable, since all variables namnes
			# in the regex above are declared before this function is called.
			[[ -z ${!key} ]] && eval "$key=$(printf "%q" "$value")"

		fi

	done < <(cat ${files[@]})

}

# Usage: theme_to_activate <theme-list>
# Echo the slug of the last theme in the list of themes <theme-list>.
theme_to_activate() {

	(

		# Enable the extended pattern matching
		shopt -s extglob

		# Extract the last item of <theme-list>
		local theme=${1##*,}

		# Echo the basename without the suffix
		echo ${theme//+(*\/|.*)}

	)

}

# Usage: make_uniq_array <items>
# When called, <items> should be a comma-separated list of items. After the
# call, <items> contains an array where all items occur exactly once. Note that
# the original order of <items> is not maintained.
make_uniqe_array() {

	# Uses name reference to refer to the original variable 
	local -n arr=$1 

	# Splits the string into an array at each comma
	IFS=',' read -r -a tempArray <<< "$arr" 

	# Declares an associative array to filter out duplicates
	declare -A tempAssocArray 

	# Adds each element from tempArray to tempAssocArray to eliminate duplicates
	for element in "${tempArray[@]}"; do
		tempAssocArray["$element"]=1
	done

	# Turns the associative array back into an indexed array without duplicates
	arr=("${!tempAssocArray[@]}")

}

# Usage: download_latest_tag <remote-git-repository-url>
# Clones <remote-git-repository-url> and checkout the latest tag.
# The local repository created in the process is removed. The argument
# <remote-git-repository-url> must be the URL to a remote repository.
# Example: https://github.com/Kntnt/kntnt-canvas.git
# Example: git@github.com:Kntnt/kntnt-canvas.git
download_latest_tag() {

	(
		
		# Enable Bash extended globbing features
		shopt -s extglob

		# Store the first argument of the function in 'repo', which should be the repository URL
		local repo=$1
		
		# Extract the repository name from the URL for use as the directory name
		local name=${repo//+(*\/|.*)}

		# The label of the tag or bransch to be checked out
		local checkout=

		# Create a new directory named after the repository and change into it
		mkdir -p "$name"
		cd "$name"

		# Initialize a new Git repository and add a remote pointing to the original repository
		git init
		git remote add origin "$repo"
		
		# Fetch all tags from the remote repository, cleaning up any deleted references
		git fetch --prune --tags

		# Attempt to identify the latest tag in the remote repository
		local tag=$(git rev-list --tags --max-count=1)

		# If a tag is found, convert the tag hash to its name and checkout the tag
		if [[ -n $tag ]]; then

			# Convert the latest tag hash to the tag name
			checkout=$(git describe --tags "$tag")

			echo "Checking out tag: $checkout"

		# If no tags are found, try to find and checkout the default branch
		else

			# Fetch the name of the default branch from the remote repository, ensuring output in English
			local default_branch=$(LC_ALL=C git remote show origin | sed -n '/HEAD branch/s/.*: //p')

			# Fetch the latest state of the default branch and switch to it in a detached HEAD state
			git fetch origin "$default_branch"

			checkout="origin/$default_branch"

			echo "No tags found, attempting to check out the default branch: $default_branch"

		fi

		# Checkout the code
		git checkout "$checkout"

		# Remove the .git directory to clean up repository metadata from the local filesystem
		rm -rf .git

	)

}


# Usage: wp_install <type> <item>
# Call `wp <type> install <item>`` where <type> is `theme` or `plugin`, and
# <item> is permissible slug, local path to a zip-file.
wp_install() {

	local type="$1"
	local item="$2"
	local remove=

	# Deal with local path
	if [[ -f $item ]]; then

		# Temporary copy the zip-file into the container
		mkdir -p "$wp/.mkwp"
		cp $item "$wp/.mkwp/"
		item=".mkwp/$(basename $item)"

		# Wait up to 15 seconds for mutagen to sync
		local count=0; while [[ $count -lt 15 && ! $(ddev exec ls $item &>/dev/null; echo $?) -eq 0 ]]; do sleep 1; ((count++)); done

	fi

	# Install
	ddev wp $type install "$item"

	# Remove temporary copy if exisiting.
	ddev exec rm -rf .mkwp

}

# Usage: install <list-name>
# Install the items listed in the array variable with the name <list-name> into
# a directory with the sama name placed underneath the directory `wp-content`.
# For the intended function, <list-name> should be `themes`, `plugins` or
# `mu-plugins`.
install() {

	(

		local type=${1%s}
		local -n items=${1//-/_} # Changes mu-plugins to mu_plugins
		
		cd "$wp/wp-content/${type}s"

		for item in ${items[@]}; do
			case "$item" in
				*.php) curl -OLf "$item" ;;
				*.git) download_latest_tag "$item" ;;
				*)     wp_install $type $item ;;
			esac
		done

	)

}


# =============================================================================


# If MKWP_DEBUG is defined, print a trace of simple commands, for commands,
# case commands, select commands, and arithmetic for commands and their
# arguments or associated word lists after they are expanded and before they
# are executed. The value of the PS4 variable is expanded and the resultant
# value is printed before the command and its expanded arguments.
[[ $MKWP_DEBUG ]] && set -x

# The return value of a pipeline is the value of the last (rightmost) command
# to exit with a non-zero status, or zero if all commands in the pipeline exit
# successfully.
set -o pipefail
 
# Treat unset variables and parameters other than the special parameters ‘@’ or
# ‘*’, or array variables subscripted with ‘@’ or ‘*’, as an error when
# performing parameter expansion. An error message will be written to the
# standard error, and a non-interactive shell will exit. 
set -u

# The main script
(

	# Set options variables used by the script. Should another variable sneak into
	# the script, it's an error and `set -u` aborts the execution.
	name=
	title=
	directory=
	email=
	user=
	password=
	language=
	themes=
	plugins=
	mu_plugins=
	php=
	config=

	# Parse the argument list from the command line
	handle_arguments "$@"

	# Parse config files
	handle_config_files

	# Tidy up, fill in default values and add some extra variables.
	name=${name,,}
	title=${title:=${name^}}
	directory=${directory:=$(pwd)}
	email=${email:=$(whoami)@$(hostname)}
	user=${user:=${email%@*}}
	password=${password:=$(tr -dc 'a-zA-Z0-9!#$%&()*+,-./:;<=>?@[\]_{|}' < /dev/urandom | head -c 16)}
	language=${language:=en_US}
	themes=${themes:=twentytwentyfour}
	php=${php:=7.4}
	wp="$directory/$name"
	url="https://$name.ddev.site"

	# Echo all parameters used by the script.
	echo "name=$name"
	echo "title=$title"
	echo "directory=$directory"
	echo "email=$email"
	echo "user=$user"
	echo "password=$password"
	echo "language=$language"
	echo "themes=$themes"
	echo "plugins=$plugins"
	echo "mu_plugins=$mu_plugins"
	echo "php=$php"
	echo "config=$config"
	echo "wp=$wp"
	echo "url=$url"

	# Validate options
	ddev_projects=$(ddev list -j)
	if echo $ddev_projects | grep -q "\"approot\":\"$wp\""; then die "A DDEV project already exists in the directory $wp." 15; fi
	if echo $ddev_projects | grep -q "\"name\":\"$name\""; then die "A project named '$name' already exists in DDEV." 16; fi
	[[ "$name" ]] || die "Error: Missing name of the project." 3
	[[ "$name" =~ ^[[:alpha:]]([[:alpha:]]|[[:digit:]]|[-.])*$ ]] || die "Invalid name" 11
	[[ "$title" =~ ^[[:print:]]+$ ]] || die "Invalid title: $title" 4
	[[ "$email" =~ ^([A-Za-z]+[A-Za-z0-9]*((\.|\-|\_)?[A-Za-z]+[A-Za-z0-9]*){1,})@(([A-Za-z]+[A-Za-z0-9]*)+((\.|\-|\_)?([A-Za-z]+[A-Za-z0-9]*)+){1,})+\.([A-Za-z]{2,})+ ]] || die "Invalid email address: $email" 6
	[[ $password =~ ^[[:print:]]{12,}$ ]] || die "Invalid password. Must be at least 12 characters." 7
	[[ "$language" =~ ^[[:lower:]]{2}(_[[:upper:]]{2})?$ ]] || die "Invalid language code: $language" 8
	[[ "$php" =~ ^7\.[0-4]$|^8\.[0-3]$ ]] || die "Invalid PHP version: $php" 9
	[[ -e "$wp" ]] && die "$wp already exists $wp" 13
	[[ -d $directory ]] && [[ -w $directory ]] || die "Cannot create $wp" 14

	# Get the theme to activate
	theme=$(theme_to_activate $themes)

	# Remove duplicates from list of themes and plugins and convert them to arrays.
	# Note that the original order of the lists is not maintained.
	make_uniqe_array themes
	make_uniqe_array plugins
	make_uniqe_array mu_plugins

	# Chek that DDEV is working
	ddev debug dockercheck &> /dev/null || die "Error: Check that a Docker provider is installed and running and that DDEV is properly installed" 1

	# Create and enter the WordPress root directory.
	mkdir -p $wp
	cd $wp

	# Create local php.ini with infinite timeout. Don't use on production!
	mkdir -p ".ddev/php"
	cat <<- 'EOT' > .ddev/php/my-php.ini
	[PHP]
	; Don't do this in production :-p
	max_input_time = 0          ; infinite time
	max_execution_time = 0      ; infinite time
	default_socket_timeout = -1 ; infinite time
	EOT

	# Configure and start the Docker container
	ddev config --project-type=wordpress --disable-settings-management --php-version=$php --performance-mode=mutagen
	ddev start

	# Download WordPress
	ddev wp core download --locale=$language

	# Wait for Mutagen to sync.
	echo -n "Wait for Mutagen to sync "
	while [ ! -f "index.php" ]; do
		echo -n '.'
		sleep 1;
	done
	echo -e "\nDone."

	# Create wp-config.php
	ddev wp config create --dbname=db --dbuser=db --dbpass=db --dbhost="ddev-$name-db" --dbprefix=wp_ --dbcharset=utf8mb4 --dbcollate=utf8mb4_unicode_ci --locale="$language" --extra-php <<- EOT
	//define( 'DISABLE_WP_CRON', true );
	define( 'WP_MEMORY_LIMIT', '64M' );
	define( 'WP_MAX_MEMORY_LIMIT', '256M' );
	define( 'DISALLOW_FILE_EDIT', true );
	define( 'WP_AUTO_UPDATE_CORE', 'minor' );
	define( 'MEDIA_TRASH', true );
	define( 'EMPTY_TRASH_DAYS', '90' );
	define( 'WP_DEBUG', true );
	define( 'WP_DEBUG_LOG', true );
	define( 'WP_DEBUG_DISPLAY', false );
	EOT

	# Install WordPress
	ddev wp core install --url="$url" --title="$title" --admin_user="$user" --admin_password="$password" --admin_email="$email" --skip-email

	# Create home for "must use" plugins
	mkdir -p wp-content/mu-plugins/DISABLED

	# Remove default themes and plugins
	rm -rf wp-content/themes/* wp-content/plugins/*

	# Add empty index.php file
	cp wp-content/index.php wp-content/themes
	cp wp-content/index.php wp-content/plugins
	cp wp-content/index.php wp-content/mu-plugins

	# Install themes and plugins
	install themes
	install plugins
	install mu-plugins

	# Activate the last listed theme
	ddev wp theme activate $theme

	# Launch site
	ddev launch

	# Inform user.
	echo -e "\e[1;30;103m\n\nYou should now see your new WordPress site in your browser.\n\nUsername: $user\npassword: $password\n\e[0m"

) 
